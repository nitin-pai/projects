package com.dictionary.api;

/**
 * @author nitinpai
 * 
 *         Type to define which level of logging is required use DEBUG to print
 *         debugging information in the app use INFO to print debugging or
 *         informative information in the ap use NONE to disable priting any
 *         logging information in the app
 */
enum LogType {
	DEBUG, INFO, NONE
}

/**
 * @author nitinpai
 * 
 *         Basic implementation of a logging utility which would help to control
 *         the amount of logs generated by the app
 * 
 */
public class Logger {

	/**
	 * Level attached here defines which logging will be done.
	 * Change this to change the amount of log information output
	 */
	private LogType type = LogType.INFO;

	/**
	 * Singleton instance
	 */
	private static Logger logger = new Logger();

	/**
	 * private constructor to implement basic Singleton
	 */
	private Logger() {
	}

	/**
	 * Static method to return a single instance of Logger created
	 * @return Logger singleton
	 */
	public static Logger getLogger() {
		return logger;
	}

	public void setType(LogType type) {
		this.type = type;
	}

	/**
	 * Method to generate info or debug level logs
	 * 
	 * @param text
	 */
	public void info(String text) {
		if (type.equals(LogType.DEBUG) || type.equals(LogType.INFO)) {
			this.log(text);
		}
	}

	/**
	 * Method to generate debug level logs only
	 * 
	 * @param text
	 */
	public void debug(String text) {
		if (type.equals(LogType.DEBUG)) {
			this.log(text);
		}
	}

	private void log(String text) {
		System.out.println(text);
	}
}
